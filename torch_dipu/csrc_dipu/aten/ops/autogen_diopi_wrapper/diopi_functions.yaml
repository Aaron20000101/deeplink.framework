- schema: "aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)"
  custom_code: printf("[%s:%s:%d]:%s\n",__FILE__,__FUNCTION__,__LINE__,"autogened function");
  interface: diopiAdd(ctx, out, self, other, &alpha)

- schema: "add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor"
  interface: diopiAddScalar(ctx, self, self, &other, &alpha)

- schema: "aten::sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)"
  interface: diopiSub(ctx, out, self, other, &alpha)

- schema: "aten::div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)"
  interface: diopiDiv(&context, self, self, other, RoundModeNone)

- schema: "aten::div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)"
  interface: diopiDiv(&context, out, self, other, RoundModeNone)

- schema: "aten::div(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> Tensor(a!)"
  custom_code: const auto mode = toDiopiRoundMode(rounding_mode.has_value() ? rounding_mode.value().data():"none");
  interface: diopiDiv(&context, out, self, other, mode)

- schema: "aten::div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)"
  interface: diopiDivInpScalar(&context, self, &other, RoundModeNone)

- schema: "aten::div_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> Tensor(a!)"
  custom_code: const auto mode = toDiopiRoundMode(rounding_mode.has_value() ? rounding_mode.value().data():"none");
  interface: diopiDivInpScalar(&context, self, &other, mode)

- schema: "aten::div_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> Tensor(a!)"
  custom_code: const auto mode = toDiopiRoundMode(rounding_mode.has_value() ? rounding_mode.value().data():"none");
  interface: diopiDiv(&context, self, self, other, mode)

- schema: "aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)"
  interface: diopiFill(&context, self, &value)

- schema: "aten::mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)"
  interface: diopiMul(&context, self, self, other)
