
- schema: "max_pool2d_backward(Tensor grad_output, Tensor input, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor? indices=None) -> Tensor"
  register_op: False
  size_attr: [kernel_size, stride, padding, dilation]
  custom_code_at_the_beginning: |
    at::Tensor out;
    out = at::empty(input.sizes(), input.options());
  interface: diopiMaxPool2dBackward(ctx, out, grad_output, input, kernel_size, stride, padding, dilation, ceil_mode, indices)

- schema: "max_pool2d(Tensor input, int[2] kernel_size=1, int[2] stride=1, int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor"
  size_attr: [kernel_size, stride, padding, dilation]
  custom_code_at_the_beginning: |
    int64_t batch_size = input.size(0);
    int64_t channel = input.size(1);
    int64_t height = input.size(2);
    int64_t width = input.size(3);
    int64_t out_height = (height + 2 * padding[0] - dilation[0] * (kernel_size[0] - 1) - 1) / stride[0] + 1;
    int64_t out_width = (width + 2 * padding[1] - dilation[1] * (kernel_size[1] - 1) - 1) / stride[1] + 1;
    c10::SmallVector<int64_t, 8> output_size = {batch_size, channel, out_height, out_width};
    at::Tensor out = at::empty(output_size, input.options());
  interface: diopiMaxPool2d(&context, out, input, kernel_size, stride, padding, dilation, ceil_mode)
  autograd: True
  saved_data: [kernel_size, stride, padding, dilation, input]
  backward_schema: "max_pool2d_backward(Tensor grad_output, Tensor input, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor? indices=None) -> Tensor"
  cal_grad_code: |
    auto input = input_.toTensor();
    auto grad_output = grad_outputs.at(0);
    auto kernel_size = kernel_size_.toIntVector();
    auto padding = padding_.toIntVector();
    auto stride = stride_.toIntVector();
    auto dilation = dilation_.toIntVector();
    bool ceil_mode = false;
    auto indices = input_.toTensor();
  backward_return_code: |
    std::vector<at::Tensor> outputs(6);
    outputs[0] = result;
    return outputs;